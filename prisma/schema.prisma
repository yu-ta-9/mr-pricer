datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  forms     Form[]
}

model VerificationRequest {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
}

model Form {
  id            Int      @id @default(autoincrement())
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @map("user_id")
  name          String
  description   String?
  friendlyKey   String    @unique @map("friendly_key")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  fields     Field[]
  profile    Profile?
}

model Field {
  id            Int    @id @default(autoincrement())
  form          Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId        Int    @map("form_id")
  type          FieldType
  name          String
  description   String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  fieldSelect   FieldSelect?
  fieldNumber   FieldNumber?
}

enum FieldType {
  SELECT
  NUMBER
}

model FieldSelect {
  id            Int    @id @default(autoincrement())
  field         Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId       Int    @map("field_id") @unique
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  fieldSelectOptions FieldSelectOption[]
}

model FieldSelectOption {
  id            Int    @id @default(autoincrement())
  fieldSelect   FieldSelect  @relation(fields: [fieldSelectId], references: [id], onDelete: Cascade)
  fieldSelectId Int    @map("field_select_id")
  label         String
  price         Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
}

model FieldNumber {
  id            Int    @id @default(autoincrement())
  field         Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId       Int    @map("field_id") @unique
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  fieldNumberRanges FieldNumberRange[]
}

model FieldNumberRange {
  id            Int    @id @default(autoincrement())
  fieldNumber   FieldNumber  @relation(fields: [fieldNumberId], references: [id], onDelete: Cascade)
  fieldNumberId Int    @map("field_number_id")
  gte           Int
  lt            Int
  price         Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
}

model Profile {
  id Int @id @default(autoincrement())
  form          Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId        Int    @map("form_id") @unique
  name          String
  content       String @db.Text
  icon_key      String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  profileLinks  ProfileLink[]
}

model ProfileLink {
  id Int @id @default(autoincrement())
  profile       Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     Int    @map("profile_id")
  label         String
  url           String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
}

